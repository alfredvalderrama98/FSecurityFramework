# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.10.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1329, 691)
        MainWindow.setMinimumSize(QtCore.QSize(1329, 691))
        MainWindow.setMaximumSize(QtCore.QSize(10000, 10000))
        font = QtGui.QFont()
        font.setFamily("ubuntu-light")
        font.setPointSize(-1)
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("resources/icons/FSecurity.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("QMainWindow { background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 rgba(17, 5, 0, 255), stop:0.081448 rgba(66, 46, 24, 255), stop:0.104072 rgba(30, 26, 73, 255), stop:0.41629 rgba(7, 4, 37, 255), stop:0.714932 rgba(126, 14, 81, 255), stop:0.751131 rgba(29, 13, 13, 255), stop:0.886878 rgba(70, 70, 51, 255)); font-family: ubuntu-light; font-width: bold; font-size: 11px; }\n"
"QMenuBar { color: white }\n"
"QTabWidget { color: white; }\n"
"QTableWidget { color: white; background-color: #251313; }\n"
"\n"
"")
        MainWindow.setIconSize(QtCore.QSize(30, 30))
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(170, 10, 531, 61))
        self.widget.setMinimumSize(QtCore.QSize(441, 61))
        self.widget.setMaximumSize(QtCore.QSize(600, 150))
        self.widget.setObjectName("widget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.widget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 521, 57))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.OSDetector = QtWidgets.QToolButton(self.gridLayoutWidget)
        self.OSDetector.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.OSDetector.setMouseTracking(True)
        self.OSDetector.setTabletTracking(True)
        self.OSDetector.setStyleSheet("QToolButton { border-radius: 100px; }")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("resources/icons/kali-nmap.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.OSDetector.setIcon(icon1)
        self.OSDetector.setIconSize(QtCore.QSize(45, 45))
        self.OSDetector.setObjectName("OSDetector")
        self.gridLayout_2.addWidget(self.OSDetector, 0, 6, 1, 1)
        self.EHarvest = QtWidgets.QToolButton(self.gridLayoutWidget)
        self.EHarvest.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.EHarvest.setMouseTracking(True)
        self.EHarvest.setStyleSheet("QToolButton { border-radius: 100px; }")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("resources/icons/harvest.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.EHarvest.setIcon(icon2)
        self.EHarvest.setIconSize(QtCore.QSize(45, 45))
        self.EHarvest.setObjectName("EHarvest")
        self.gridLayout_2.addWidget(self.EHarvest, 0, 4, 1, 1)
        self.TerminalLoader = QtWidgets.QToolButton(self.gridLayoutWidget)
        self.TerminalLoader.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.TerminalLoader.setMouseTracking(True)
        self.TerminalLoader.setTabletTracking(True)
        self.TerminalLoader.setStyleSheet("QToolButton { border-radius: 100px; }")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("resources/icons/utilities-terminal.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.TerminalLoader.setIcon(icon3)
        self.TerminalLoader.setIconSize(QtCore.QSize(45, 45))
        self.TerminalLoader.setObjectName("TerminalLoader")
        self.gridLayout_2.addWidget(self.TerminalLoader, 0, 0, 1, 1)
        self.MploitLoader = QtWidgets.QToolButton(self.gridLayoutWidget)
        self.MploitLoader.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.MploitLoader.setMouseTracking(True)
        self.MploitLoader.setTabletTracking(True)
        self.MploitLoader.setStyleSheet("QToolButton { border-radius: 100px; }")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("resources/icons/metasploit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.MploitLoader.setIcon(icon4)
        self.MploitLoader.setIconSize(QtCore.QSize(45, 45))
        self.MploitLoader.setObjectName("MploitLoader")
        self.gridLayout_2.addWidget(self.MploitLoader, 0, 5, 1, 1)
        self.AndroidAttack = QtWidgets.QToolButton(self.gridLayoutWidget)
        self.AndroidAttack.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.AndroidAttack.setMouseTracking(True)
        self.AndroidAttack.setTabletTracking(True)
        self.AndroidAttack.setStyleSheet("QToolButton { border-radius: 100px; }")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("resources/icons/android.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.AndroidAttack.setIcon(icon5)
        self.AndroidAttack.setIconSize(QtCore.QSize(45, 45))
        self.AndroidAttack.setObjectName("AndroidAttack")
        self.gridLayout_2.addWidget(self.AndroidAttack, 0, 3, 1, 1)
        self.TcpDumpLoader = QtWidgets.QToolButton(self.gridLayoutWidget)
        self.TcpDumpLoader.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.TcpDumpLoader.setMouseTracking(True)
        self.TcpDumpLoader.setTabletTracking(True)
        self.TcpDumpLoader.setAccessibleName("")
        self.TcpDumpLoader.setStyleSheet("QToolButton { border-radius: 100px; }")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("resources/icons/wireshark.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.TcpDumpLoader.setIcon(icon6)
        self.TcpDumpLoader.setIconSize(QtCore.QSize(45, 45))
        self.TcpDumpLoader.setObjectName("TcpDumpLoader")
        self.gridLayout_2.addWidget(self.TcpDumpLoader, 0, 2, 1, 1)
        self.DiscoverNetwork = QtWidgets.QToolButton(self.gridLayoutWidget)
        self.DiscoverNetwork.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.DiscoverNetwork.setMouseTracking(True)
        self.DiscoverNetwork.setTabletTracking(True)
        self.DiscoverNetwork.setStyleSheet("QToolButton { border-radius: 100px; }")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("resources/icons/netdiscover.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.DiscoverNetwork.setIcon(icon7)
        self.DiscoverNetwork.setIconSize(QtCore.QSize(45, 45))
        self.DiscoverNetwork.setCheckable(False)
        self.DiscoverNetwork.setObjectName("DiscoverNetwork")
        self.gridLayout_2.addWidget(self.DiscoverNetwork, 0, 1, 1, 1)
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 80, 971, 551))
        self.tabWidget.setDocumentMode(True)
        self.tabWidget.setTabsClosable(True)
        self.tabWidget.setMovable(True)
        self.tabWidget.setObjectName("tabWidget")
        self.Exploit_Tab = QtWidgets.QWidget()
        self.Exploit_Tab.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Exploit_Tab.setTabletTracking(True)
        self.Exploit_Tab.setObjectName("Exploit_Tab")
        self.Exploit_Table = QtWidgets.QTableWidget(self.Exploit_Tab)
        self.Exploit_Table.setGeometry(QtCore.QRect(0, 0, 971, 521))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.Exploit_Table.setFont(font)
        self.Exploit_Table.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Exploit_Table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.Exploit_Table.setShowGrid(False)
        self.Exploit_Table.setGridStyle(QtCore.Qt.DashDotDotLine)
        self.Exploit_Table.setObjectName("Exploit_Table")
        self.Exploit_Table.setColumnCount(13)
        self.Exploit_Table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignVCenter)
        self.Exploit_Table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Exploit_Table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Exploit_Table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Exploit_Table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.Exploit_Table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.Exploit_Table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.Exploit_Table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.Exploit_Table.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.Exploit_Table.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.Exploit_Table.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.Exploit_Table.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.Exploit_Table.setHorizontalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.Exploit_Table.setHorizontalHeaderItem(12, item)
        self.Exploit_Table.horizontalHeader().setDefaultSectionSize(200)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("resources/icons/FSecurity.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tabWidget.addTab(self.Exploit_Tab, icon8, "")
        self.Malware_Tab = QtWidgets.QWidget()
        self.Malware_Tab.setObjectName("Malware_Tab")
        self.Malware_Table = QtWidgets.QTableWidget(self.Malware_Tab)
        self.Malware_Table.setGeometry(QtCore.QRect(0, 0, 971, 521))
        font = QtGui.QFont()
        font.setFamily("Noto Sans")
        font.setBold(True)
        font.setWeight(75)
        self.Malware_Table.setFont(font)
        self.Malware_Table.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Malware_Table.setStyleSheet("")
        self.Malware_Table.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.Malware_Table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.Malware_Table.setShowGrid(False)
        self.Malware_Table.setObjectName("Malware_Table")
        self.Malware_Table.setColumnCount(13)
        self.Malware_Table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignVCenter)
        self.Malware_Table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Malware_Table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Malware_Table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Malware_Table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.Malware_Table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.Malware_Table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.Malware_Table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.Malware_Table.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.Malware_Table.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.Malware_Table.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.Malware_Table.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.Malware_Table.setHorizontalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.Malware_Table.setHorizontalHeaderItem(12, item)
        self.Malware_Table.horizontalHeader().setCascadingSectionResizes(False)
        self.Malware_Table.horizontalHeader().setDefaultSectionSize(200)
        self.Malware_Table.verticalHeader().setHighlightSections(False)
        self.Malware_Table.verticalHeader().setStretchLastSection(False)
        self.tabWidget.addTab(self.Malware_Tab, icon8, "")
        self.CInfo = QtWidgets.QGroupBox(self.centralwidget)
        self.CInfo.setGeometry(QtCore.QRect(1030, 10, 251, 81))
        self.CInfo.setMinimumSize(QtCore.QSize(251, 71))
        self.CInfo.setMaximumSize(QtCore.QSize(1000, 1000))
        font = QtGui.QFont()
        font.setFamily("KacstOffice")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        self.CInfo.setFont(font)
        self.CInfo.setMouseTracking(True)
        self.CInfo.setTabletTracking(True)
        self.CInfo.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.CInfo.setAutoFillBackground(False)
        self.CInfo.setStyleSheet("QGroupBox { background-color: black; color: white; border-color: white; border-width: 50px; }")
        self.CInfo.setAlignment(QtCore.Qt.AlignCenter)
        self.CInfo.setFlat(True)
        self.CInfo.setCheckable(False)
        self.CInfo.setObjectName("CInfo")
        self.gridLayout = QtWidgets.QGridLayout(self.CInfo)
        self.gridLayout.setObjectName("gridLayout")
        self.dblabel = QtWidgets.QLabel(self.CInfo)
        font = QtGui.QFont()
        font.setFamily("Ubuntu Light")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.dblabel.setFont(font)
        self.dblabel.setStyleSheet("QLabel { color: white; }")
        self.dblabel.setTextFormat(QtCore.Qt.PlainText)
        self.dblabel.setObjectName("dblabel")
        self.gridLayout.addWidget(self.dblabel, 5, 0, 1, 1)
        self.IPLabel = QtWidgets.QLabel(self.CInfo)
        self.IPLabel.setMinimumSize(QtCore.QSize(210, 17))
        self.IPLabel.setMaximumSize(QtCore.QSize(210, 17))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Light")
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.IPLabel.setFont(font)
        self.IPLabel.setStyleSheet("QLabel { color: white; }")
        self.IPLabel.setTextFormat(QtCore.Qt.AutoText)
        self.IPLabel.setScaledContents(False)
        self.IPLabel.setObjectName("IPLabel")
        self.gridLayout.addWidget(self.IPLabel, 0, 0, 1, 1)
        self.LogBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.LogBrowser.setGeometry(QtCore.QRect(1000, 140, 321, 481))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setItalic(True)
        self.LogBrowser.setFont(font)
        self.LogBrowser.setStyleSheet("QTextBrowser { background-color: black; color: white; }")
        self.LogBrowser.setDocumentTitle("")
        self.LogBrowser.setLineWrapMode(QtWidgets.QTextEdit.NoWrap)
        self.LogBrowser.setObjectName("LogBrowser")
        self.LoggerLabel = QtWidgets.QLabel(self.centralwidget)
        self.LoggerLabel.setGeometry(QtCore.QRect(1080, 110, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Myanmar UI")
        font.setPointSize(13)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.LoggerLabel.setFont(font)
        self.LoggerLabel.setObjectName("LoggerLabel")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(1030, 90, 251, 20))
        self.line.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line.setLineWidth(1)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(150, 20, 20, 41))
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.ReloadButton = QtWidgets.QPushButton(self.centralwidget)
        self.ReloadButton.setGeometry(QtCore.QRect(20, 20, 77, 27))
        self.ReloadButton.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.ReloadButton.setStyleSheet(" QPushButton { background-color: black; border-top-radius: 50%; border-buttom-radius: 50%;  color: white; } ")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("resources/icons/refresh.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ReloadButton.setIcon(icon9)
        self.ReloadButton.setIconSize(QtCore.QSize(24, 24))
        self.ReloadButton.setAutoDefault(True)
        self.ReloadButton.setFlat(True)
        self.ReloadButton.setObjectName("ReloadButton")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(690, 20, 20, 41))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setStyleSheet("QStatusBar { color: white; }")
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1329, 23))
        self.menubar.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.menubar.setAutoFillBackground(False)
        self.menubar.setStyleSheet("QMenuBar { background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.05 rgba(14, 8, 73, 255), stop:0.186364 rgba(65, 0, 55, 255), stop:0.313636 rgba(0, 0, 55, 255), stop:0.363636 rgba(27, 25, 0, 255), stop:0.454545 rgba(0, 0, 0, 255), stop:0.586364 rgba(28, 17, 122, 255), stop:0.777273 rgba(94, 11, 11, 255), stop:0.927273 rgba(0, 0, 0, 255)) }")
        self.menubar.setDefaultUp(False)
        self.menubar.setObjectName("menubar")
        self.menuFSecurity = QtWidgets.QMenu(self.menubar)
        self.menuFSecurity.setStyleSheet("")
        self.menuFSecurity.setObjectName("menuFSecurity")
        self.menuUpload = QtWidgets.QMenu(self.menuFSecurity)
        self.menuUpload.setIcon(icon)
        self.menuUpload.setObjectName("menuUpload")
        self.menuShow = QtWidgets.QMenu(self.menubar)
        self.menuShow.setObjectName("menuShow")
        self.menuCheck = QtWidgets.QMenu(self.menubar)
        self.menuCheck.setObjectName("menuCheck")
        self.menuabout = QtWidgets.QMenu(self.menubar)
        self.menuabout.setObjectName("menuabout")
        MainWindow.setMenuBar(self.menubar)
        self.actionExploits = QtWidgets.QAction(MainWindow)
        self.actionExploits.setIcon(icon)
        self.actionExploits.setObjectName("actionExploits")
        self.actionPayloads = QtWidgets.QAction(MainWindow)
        self.actionPayloads.setIcon(icon)
        self.actionPayloads.setObjectName("actionPayloads")
        self.actionCVE = QtWidgets.QAction(MainWindow)
        self.actionCVE.setIcon(icon)
        self.actionCVE.setObjectName("actionCVE")
        self.actionEdit_Configuration = QtWidgets.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("resources/icons/configuration.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionEdit_Configuration.setIcon(icon10)
        self.actionEdit_Configuration.setObjectName("actionEdit_Configuration")
        self.actionExit = QtWidgets.QAction(MainWindow)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("resources/icons/exit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExit.setIcon(icon11)
        self.actionExit.setObjectName("actionExit")
        self.actionSet_LHOST = QtWidgets.QAction(MainWindow)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("resources/icons/network.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSet_LHOST.setIcon(icon12)
        self.actionSet_LHOST.setObjectName("actionSet_LHOST")
        self.actionSet_LPORT = QtWidgets.QAction(MainWindow)
        self.actionSet_LPORT.setIcon(icon12)
        self.actionSet_LPORT.setObjectName("actionSet_LPORT")
        self.actionDatabase_Connection = QtWidgets.QAction(MainWindow)
        self.actionDatabase_Connection.setObjectName("actionDatabase_Connection")
        self.actionLocal_Network_Connection = QtWidgets.QAction(MainWindow)
        self.actionLocal_Network_Connection.setObjectName("actionLocal_Network_Connection")
        self.actionOS_Detection = QtWidgets.QAction(MainWindow)
        self.actionOS_Detection.setObjectName("actionOS_Detection")
        self.actionPort_Scanner = QtWidgets.QAction(MainWindow)
        self.actionPort_Scanner.setObjectName("actionPort_Scanner")
        self.actionAvailable_Exploits = QtWidgets.QAction(MainWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("resources/icons/exploitation.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAvailable_Exploits.setIcon(icon13)
        self.actionAvailable_Exploits.setObjectName("actionAvailable_Exploits")
        self.actionAvailable_Trojan = QtWidgets.QAction(MainWindow)
        self.actionAvailable_Trojan.setIcon(icon13)
        self.actionAvailable_Trojan.setObjectName("actionAvailable_Trojan")
        self.actionOS_Detection_2 = QtWidgets.QAction(MainWindow)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap("resources/icons/OS.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOS_Detection_2.setIcon(icon14)
        self.actionOS_Detection_2.setObjectName("actionOS_Detection_2")
        self.actionPort_Scanner_2 = QtWidgets.QAction(MainWindow)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap("resources/icons/zenmap.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPort_Scanner_2.setIcon(icon15)
        self.actionPort_Scanner_2.setObjectName("actionPort_Scanner_2")
        self.actionFind_Public_Emails_2 = QtWidgets.QAction(MainWindow)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap("resources/icons/email.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionFind_Public_Emails_2.setIcon(icon16)
        self.actionFind_Public_Emails_2.setObjectName("actionFind_Public_Emails_2")
        self.actionAvailable_Algorithms = QtWidgets.QAction(MainWindow)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap("resources/icons/algo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAvailable_Algorithms.setIcon(icon17)
        self.actionAvailable_Algorithms.setObjectName("actionAvailable_Algorithms")
        self.actionAuthors = QtWidgets.QAction(MainWindow)
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap("resources/icons/author.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAuthors.setIcon(icon18)
        self.actionAuthors.setObjectName("actionAuthors")
        self.actionDocumentation = QtWidgets.QAction(MainWindow)
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap("resources/icons/docu.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDocumentation.setIcon(icon19)
        self.actionDocumentation.setObjectName("actionDocumentation")
        self.actionAbout_Qt_Framework = QtWidgets.QAction(MainWindow)
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap("resources/icons/qt.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAbout_Qt_Framework.setIcon(icon20)
        self.actionAbout_Qt_Framework.setObjectName("actionAbout_Qt_Framework")
        self.actionShow_CreatedTrojan_Payload = QtWidgets.QAction(MainWindow)
        icon21 = QtGui.QIcon()
        icon21.addPixmap(QtGui.QPixmap("resources/icons/trojan.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShow_CreatedTrojan_Payload.setIcon(icon21)
        self.actionShow_CreatedTrojan_Payload.setObjectName("actionShow_CreatedTrojan_Payload")
        self.actionShow_Infected_targets = QtWidgets.QAction(MainWindow)
        icon22 = QtGui.QIcon()
        icon22.addPixmap(QtGui.QPixmap("resources/icons/infected.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShow_Infected_targets.setIcon(icon22)
        self.actionShow_Infected_targets.setObjectName("actionShow_Infected_targets")
        self.actionShow_CVE = QtWidgets.QAction(MainWindow)
        icon23 = QtGui.QIcon()
        icon23.addPixmap(QtGui.QPixmap("resources/icons/cve.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShow_CVE.setIcon(icon23)
        self.actionShow_CVE.setObjectName("actionShow_CVE")
        self.actionFind_Attacks = QtWidgets.QAction(MainWindow)
        self.actionFind_Attacks.setObjectName("actionFind_Attacks")
        self.actionShow_Exploit = QtWidgets.QAction(MainWindow)
        icon24 = QtGui.QIcon()
        icon24.addPixmap(QtGui.QPixmap("resources/icons/exploitation.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShow_Exploit.setIcon(icon24)
        self.actionShow_Exploit.setObjectName("actionShow_Exploit")
        self.actionShow_Malware = QtWidgets.QAction(MainWindow)
        icon25 = QtGui.QIcon()
        icon25.addPixmap(QtGui.QPixmap("resources/icons/trojan.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShow_Malware.setIcon(icon25)
        self.actionShow_Malware.setObjectName("actionShow_Malware")
        self.actionNetwork_Mapper = QtWidgets.QAction(MainWindow)
        self.actionNetwork_Mapper.setIcon(icon1)
        self.actionNetwork_Mapper.setObjectName("actionNetwork_Mapper")
        self.menuUpload.addAction(self.actionExploits)
        self.menuUpload.addAction(self.actionPayloads)
        self.menuUpload.addAction(self.actionCVE)
        self.menuFSecurity.addAction(self.menuUpload.menuAction())
        self.menuFSecurity.addAction(self.actionEdit_Configuration)
        self.menuFSecurity.addAction(self.actionExit)
        self.menuShow.addAction(self.actionShow_Malware)
        self.menuShow.addAction(self.actionShow_Exploit)
        self.menuShow.addAction(self.actionShow_CVE)
        self.menuCheck.addAction(self.actionFind_Public_Emails_2)
        self.menuCheck.addAction(self.actionNetwork_Mapper)
        self.menuabout.addAction(self.actionDocumentation)
        self.menubar.addAction(self.menuFSecurity.menuAction())
        self.menubar.addAction(self.menuShow.menuAction())
        self.menubar.addAction(self.menuCheck.menuAction())
        self.menubar.addAction(self.menuabout.menuAction())
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "FSecurityFramework"))
        self.OSDetector.setStatusTip(_translate("MainWindow", "Nmap"))
        self.OSDetector.setWhatsThis(_translate("MainWindow", "Nmap"))
        self.OSDetector.setText(_translate("MainWindow", "Nmap"))
        self.EHarvest.setStatusTip(_translate("MainWindow", "Get public emails of a website"))
        self.EHarvest.setWhatsThis(_translate("MainWindow", "HarvestEmail"))
        self.EHarvest.setText(_translate("MainWindow", "HarvestEmail"))
        self.TerminalLoader.setStatusTip(_translate("MainWindow", "Launch Terminal"))
        self.TerminalLoader.setWhatsThis(_translate("MainWindow", "Launch Terminal"))
        self.TerminalLoader.setText(_translate("MainWindow", "Terminal"))
        self.MploitLoader.setStatusTip(_translate("MainWindow", "Metasploit"))
        self.MploitLoader.setWhatsThis(_translate("MainWindow", "Metasploit"))
        self.MploitLoader.setText(_translate("MainWindow", "Metasploit"))
        self.AndroidAttack.setStatusTip(_translate("MainWindow", "Android Exploit"))
        self.AndroidAttack.setWhatsThis(_translate("MainWindow", "Android Exploit"))
        self.AndroidAttack.setAccessibleDescription(_translate("MainWindow", "AndroidExploit"))
        self.AndroidAttack.setText(_translate("MainWindow", "AndroidExploit"))
        self.TcpDumpLoader.setStatusTip(_translate("MainWindow", "Packet Sniffer"))
        self.TcpDumpLoader.setWhatsThis(_translate("MainWindow", "Packet Sniffer"))
        self.TcpDumpLoader.setText(_translate("MainWindow", "Packet Sniffer"))
        self.DiscoverNetwork.setStatusTip(_translate("MainWindow", "Network Discovery"))
        self.DiscoverNetwork.setWhatsThis(_translate("MainWindow", "Launch Network Discovery"))
        self.DiscoverNetwork.setText(_translate("MainWindow", "Network Discovery"))
        self.tabWidget.setStatusTip(_translate("MainWindow", "FSecurityFramework"))
        self.Exploit_Tab.setStatusTip(_translate("MainWindow", "Available Exploits"))
        self.Exploit_Table.setSortingEnabled(True)
        item = self.Exploit_Table.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.Exploit_Table.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Title"))
        item = self.Exploit_Table.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Description"))
        item = self.Exploit_Table.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Platform"))
        item = self.Exploit_Table.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Version"))
        item = self.Exploit_Table.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Arch"))
        item = self.Exploit_Table.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Language"))
        item = self.Exploit_Table.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Module"))
        item = self.Exploit_Table.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "Module Option"))
        item = self.Exploit_Table.horizontalHeaderItem(9)
        item.setText(_translate("MainWindow", "Type"))
        item = self.Exploit_Table.horizontalHeaderItem(10)
        item.setText(_translate("MainWindow", "Date"))
        item = self.Exploit_Table.horizontalHeaderItem(11)
        item.setText(_translate("MainWindow", "Ratings"))
        item = self.Exploit_Table.horizontalHeaderItem(12)
        item.setText(_translate("MainWindow", "Exploit_Author"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Exploit_Tab), _translate("MainWindow", "Exploits"))
        self.Malware_Table.setStatusTip(_translate("MainWindow", "Available Malwares"))
        self.Malware_Table.setSortingEnabled(True)
        item = self.Malware_Table.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.Malware_Table.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Title"))
        item = self.Malware_Table.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Description"))
        item = self.Malware_Table.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Platform"))
        item = self.Malware_Table.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Version"))
        item = self.Malware_Table.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Arch"))
        item = self.Malware_Table.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Language"))
        item = self.Malware_Table.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Module"))
        item = self.Malware_Table.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "Module Option"))
        item = self.Malware_Table.horizontalHeaderItem(9)
        item.setText(_translate("MainWindow", "Type"))
        item = self.Malware_Table.horizontalHeaderItem(10)
        item.setText(_translate("MainWindow", "Date"))
        item = self.Malware_Table.horizontalHeaderItem(11)
        item.setText(_translate("MainWindow", "Ratings"))
        item = self.Malware_Table.horizontalHeaderItem(12)
        item.setText(_translate("MainWindow", "Malware_Author"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Malware_Tab), _translate("MainWindow", "Malwares"))
        self.CInfo.setStatusTip(_translate("MainWindow", "Connection Information"))
        self.CInfo.setTitle(_translate("MainWindow", "Status"))
        self.dblabel.setStatusTip(_translate("MainWindow", "Database Status"))
        self.dblabel.setText(_translate("MainWindow", "Database Status: Not Connected"))
        self.IPLabel.setText(_translate("MainWindow", "IP Address : None"))
        self.LogBrowser.setStatusTip(_translate("MainWindow", "Logs"))
        self.LogBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu Mono\'; font-size:9pt; font-weight:400; font-style:italic;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.LoggerLabel.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Noto Sans Myanmar UI\'; font-size:13pt; font-weight:600; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; color:#ffffff;\">Active Logs</span></p></body></html>"))
        self.ReloadButton.setText(_translate("MainWindow", "Reload"))
        self.menuFSecurity.setTitle(_translate("MainWindow", "FSecurity"))
        self.menuUpload.setTitle(_translate("MainWindow", "&Upload"))
        self.menuShow.setTitle(_translate("MainWindow", "&Show"))
        self.menuCheck.setTitle(_translate("MainWindow", "&Target"))
        self.menuabout.setTitle(_translate("MainWindow", "Abo&ut"))
        self.actionExploits.setText(_translate("MainWindow", "&Exploits"))
        self.actionPayloads.setText(_translate("MainWindow", "&Malware"))
        self.actionCVE.setText(_translate("MainWindow", "&CVE"))
        self.actionEdit_Configuration.setText(_translate("MainWindow", "&Edit Configuration"))
        self.actionExit.setText(_translate("MainWindow", "E&xit"))
        self.actionSet_LHOST.setText(_translate("MainWindow", "&Set LHOST"))
        self.actionSet_LPORT.setText(_translate("MainWindow", "Set LPORT"))
        self.actionDatabase_Connection.setText(_translate("MainWindow", "Database Connection"))
        self.actionLocal_Network_Connection.setText(_translate("MainWindow", "Local Network Connection"))
        self.actionOS_Detection.setText(_translate("MainWindow", "OS Detection"))
        self.actionPort_Scanner.setText(_translate("MainWindow", "Port Scanner"))
        self.actionAvailable_Exploits.setText(_translate("MainWindow", "&Available Exploits"))
        self.actionAvailable_Trojan.setText(_translate("MainWindow", "Available &Malwares"))
        self.actionOS_Detection_2.setText(_translate("MainWindow", "&OS Detection"))
        self.actionPort_Scanner_2.setText(_translate("MainWindow", "&Port Scanner"))
        self.actionFind_Public_Emails_2.setText(_translate("MainWindow", "&Find Public Emails"))
        self.actionAvailable_Algorithms.setText(_translate("MainWindow", "A&vailable Algorithms"))
        self.actionAuthors.setText(_translate("MainWindow", "&Author\'s"))
        self.actionDocumentation.setText(_translate("MainWindow", "&Framework Documentation"))
        self.actionAbout_Qt_Framework.setText(_translate("MainWindow", "About &Qt Framework"))
        self.actionShow_CreatedTrojan_Payload.setText(_translate("MainWindow", "&Show Created Malware"))
        self.actionShow_Infected_targets.setText(_translate("MainWindow", "Show &Jobs"))
        self.actionShow_CVE.setText(_translate("MainWindow", "Show &CVE"))
        self.actionFind_Attacks.setText(_translate("MainWindow", "Find Attacks"))
        self.actionShow_Exploit.setText(_translate("MainWindow", "Show &Exploit"))
        self.actionShow_Malware.setText(_translate("MainWindow", "Show &Malware"))
        self.actionNetwork_Mapper.setText(_translate("MainWindow", "Network Mapper"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
